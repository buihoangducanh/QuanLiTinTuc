package quanlitintuc.admin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import quanlitintuc.utils.DatabaseUtils;
import quanlitintuc.dataContext.CurrentUser;

/**
 *
 * @author AnhBui
 */
public class AccountManagement extends javax.swing.JFrame {

    /**
     * Creates new form AccountManagement
     */
    public AccountManagement() {
        initComponents();
        loadUserData();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTbl = new javax.swing.JTable();
        xoaBtn = new javax.swing.JButton();
        suaThanhQtvBtn = new javax.swing.JButton();
        suaThanhNguoiDungBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        usernameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        hoTenTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        vaiTroTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý tài khoản");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 51, 0));
        jLabel1.setText("QUẢN LÝ NGƯỜI DÙNG");

        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 0, 0));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        userTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        userTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Họ và tên", "Email", "Vai trò"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTbl);
        if (userTbl.getColumnModel().getColumnCount() > 0) {
            userTbl.getColumnModel().getColumn(0).setMinWidth(50);
            userTbl.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        xoaBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        xoaBtn.setForeground(new java.awt.Color(204, 51, 0));
        xoaBtn.setText("Xoá người dùng");
        xoaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaBtnActionPerformed(evt);
            }
        });

        suaThanhQtvBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        suaThanhQtvBtn.setForeground(new java.awt.Color(204, 51, 0));
        suaThanhQtvBtn.setText("Đặt làm quản trị viên");
        suaThanhQtvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suaThanhQtvBtnActionPerformed(evt);
            }
        });

        suaThanhNguoiDungBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        suaThanhNguoiDungBtn.setForeground(new java.awt.Color(51, 153, 0));
        suaThanhNguoiDungBtn.setText("Đặt làm người dùng");
        suaThanhNguoiDungBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suaThanhNguoiDungBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Username");

        usernameTxt.setEditable(false);
        usernameTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Họ và tên");

        hoTenTxt.setEditable(false);
        hoTenTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Email");

        emailTxt.setEditable(false);
        emailTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Vai trò");

        vaiTroTxt.setEditable(false);
        vaiTroTxt.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(xoaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(hoTenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(vaiTroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(suaThanhQtvBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(suaThanhNguoiDungBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hoTenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vaiTroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xoaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suaThanhQtvBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suaThanhNguoiDungBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        MainMenuAdmin mainMenuAdmin = new MainMenuAdmin();
        mainMenuAdmin.setVisible(true);
        this.dispose(); // Đóng cửa sổ MainMenuAdmin nếu bạn muốn
    }//GEN-LAST:event_backBtnActionPerformed

    private void suaThanhQtvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suaThanhQtvBtnActionPerformed
     // Lấy dòng được chọn từ bảng dữ liệu người dùng
    int selectedRow = userTbl.getSelectedRow();

    if (selectedRow != -1) {
        // Lấy giá trị của cột "ID" từ dòng được chọn
        int userId = (int) userTbl.getValueAt(selectedRow, 0);

        // Hiển thị hộp thoại xác nhận
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn sửa vai trò của người dùng thành 'Admin'?", "Xác nhận", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            // Gọi hàm cập nhật vai trò
            boolean success = updateUserRole(userId, true);

            if (success) {
                // Hiển thị thông báo thành công
                JOptionPane.showMessageDialog(this, "Đã sửa vai trò của người dùng thành 'Admin'.", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadUserData();
            } else {
                // Hiển thị thông báo lỗi
                JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi trong quá trình sửa vai trò.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        // Hiển thị thông báo khi không có dòng dữ liệu được chọn
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một người dùng để sửa vai trò thành 'Admin'.", "Thông báo", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_suaThanhQtvBtnActionPerformed

    private void xoaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xoaBtnActionPerformed
        int selectedRow = userTbl.getSelectedRow(); // Lấy dòng dữ liệu được chọn
    if (selectedRow >= 0) {
        // Lấy giá trị của cột ID trong dòng dữ liệu được chọn
        int userID = (int) userTbl.getValueAt(selectedRow, 0);
        // Kiểm tra nếu tài khoản đang đăng nhập trùng với tài khoản được chọn
        String username =(String) userTbl.getValueAt(selectedRow, 1);
        if (username.equals(CurrentUser.username)) {
            // Hiển thị thông báo không thể xóa tài khoản đang đăng nhập
            JOptionPane.showMessageDialog(this, "Không thể xóa tài khoản đang đăng nhập.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Hiển thị hộp thoại xác nhận xoá
        int choice = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xoá người dùng này?", "Xác nhận xoá", JOptionPane.YES_NO_OPTION);
        
        if (choice == JOptionPane.YES_OPTION) {
            // Thực hiện xoá người dùng từ CSDL hoặc làm bất kỳ xử lý nào khác
            boolean deleteSuccessful = deleteUser(userID);
            
            if (deleteSuccessful) {
                // Xoá dòng dữ liệu trong bảng
                DefaultTableModel model = (DefaultTableModel) userTbl.getModel();
                model.removeRow(selectedRow);
                clearForm();
                // Hiển thị thông báo thành công
                JOptionPane.showMessageDialog(this, "Người dùng đã được xoá thành công.", "Thành công", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Hiển thị thông báo lỗi
                JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi trong quá trình xoá người dùng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        // Hiển thị thông báo khi không có dòng dữ liệu được chọn
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một người dùng để xoá.", "Thông báo", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_xoaBtnActionPerformed

    private void suaThanhNguoiDungBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suaThanhNguoiDungBtnActionPerformed
        // Lấy dòng được chọn từ bảng dữ liệu người dùng
    int selectedRow = userTbl.getSelectedRow();

    if (selectedRow != -1) {
        // Lấy giá trị của cột "ID" từ dòng được chọn
        int userId = (int) userTbl.getValueAt(selectedRow, 0);

        // Hiển thị hộp thoại xác nhận
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn sửa vai trò của người dùng thành 'User'?", "Xác nhận", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            // Gọi hàm cập nhật vai trò
            boolean success = updateUserRole(userId, false);

            if (success) {
                // Hiển thị thông báo thành công
                JOptionPane.showMessageDialog(this, "Đã sửa vai trò của người dùng thành 'User'.", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadUserData();
            } else {
                // Hiển thị thông báo lỗi
                JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi trong quá trình sửa vai trò.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        // Hiển thị thông báo khi không có dòng dữ liệu được chọn
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một người dùng để sửa vai trò thành 'User'.", "Thông báo", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_suaThanhNguoiDungBtnActionPerformed

    private void userTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTblMouseClicked
    int selectedRow = userTbl.getSelectedRow(); // Lấy dòng dữ liệu được chọn
    if (selectedRow >= 0) {
        // Truy cập vào các giá trị cột trong dòng dữ liệu được chọn
        String username = (String) userTbl.getValueAt(selectedRow, 1);
        String fullName = (String) userTbl.getValueAt(selectedRow, 2);
        String email = (String) userTbl.getValueAt(selectedRow, 3);
        String vaiTro = (String) userTbl.getValueAt(selectedRow, 4);
        // Hiển thị các giá trị lên các trường dữ liệu hoặc làm bất kỳ xử lý nào khác
        usernameTxt.setText(username);
        hoTenTxt.setText(fullName);
        emailTxt.setText(email);
        vaiTroTxt.setText(vaiTro);
    }
    }//GEN-LAST:event_userTblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JTextField hoTenTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton suaThanhNguoiDungBtn;
    private javax.swing.JButton suaThanhQtvBtn;
    private javax.swing.JTable userTbl;
    private javax.swing.JTextField usernameTxt;
    private javax.swing.JTextField vaiTroTxt;
    private javax.swing.JButton xoaBtn;
    // End of variables declaration//GEN-END:variables
    private void loadUserData() {
        try (Connection conn = DatabaseUtils.getConnection(); 
            PreparedStatement stmt = conn.prepareStatement("SELECT * FROM users"); 
            ResultSet rs = stmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) userTbl.getModel();
            model.setRowCount(0);

            while (rs.next()) {
                Integer id = rs.getInt("id");
                String tenTaiKhoan = rs.getString("username");
                String hoVaTen = rs.getString("full_name");
                String email = rs.getString("email");
                String vaiTro = rs.getInt("is_admin") == 1 ? "Quản trị viên" : "Người dùng";
                model.addRow(new Object[]{id, tenTaiKhoan, hoVaTen, email,vaiTro});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải người dùng từ cơ sở dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    private boolean deleteUser(int userID) {
    // TODO: Xoá người dùng từ CSDL hoặc làm bất kỳ xử lý nào khác
    // Trả về true nếu xoá thành công, false nếu có lỗi xảy ra
    
    // Ví dụ: Xoá người dùng từ CSDL
    try {
        // Kết nối đến CSDL
        Connection conn = DatabaseUtils.getConnection();
        
        // Chuẩn bị câu lệnh SQL
        String sql = "DELETE FROM users WHERE id = ?";
        PreparedStatement statement = conn.prepareStatement(sql);
        
        // Thiết lập giá trị cho tham số trong câu lệnh SQL
        statement.setInt(1, userID);
        
        // Thực hiện xoá người dùng
        int rowsAffected = statement.executeUpdate();
        
        // Đóng kết nối và trả về kết quả xoá
        conn.close();
        return rowsAffected > 0;
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
}
    private void clearForm() {
        usernameTxt.setText("");
        hoTenTxt.setText("");
        emailTxt.setText("");
        vaiTroTxt.setText("");
    }

    private boolean updateUserRole(int userId, boolean isAdmin) {
       try {
        // Kết nối đến cơ sở dữ liệu
        Connection conn = DatabaseUtils.getConnection();

        // Chuẩn bị truy vấn cập nhật
        String query = "UPDATE users SET is_admin = ? WHERE id = ?";
        PreparedStatement statement = conn.prepareStatement(query);

        // Thiết lập giá trị cho các tham số của truy vấn
        statement.setBoolean(1, isAdmin);
        statement.setInt(2, userId);

        // Thực hiện truy vấn cập nhật
        int rowsAffected = statement.executeUpdate();

        // Đóng kết nối và trả về kết quả
        statement.close();
        conn.close();

        // Trả về true nếu có ít nhất một dòng dữ liệu bị ảnh hưởng
        return rowsAffected > 0;
    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
    }
}
